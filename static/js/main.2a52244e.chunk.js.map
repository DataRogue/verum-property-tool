{"version":3,"sources":["edit-property.tsx","data-structures.tsx","select-country.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["TILE_INDOOR_CONSTS","tileType","tileDisplayName","color","baseTpCost","baseGpCost","Block","data","tile","traits","t","this","find","x","name","const","console","error","ConvertTileMatrixToBlockMatrix","mapMatrix","map","y","z","EditProperty","props","table","createRef","state","blockMatrix","selectedTileType","currentLevel","currentlySelectedTraits","setState","i","onClick","TileSelected","key","className","style","backgroundColor","coords","block","blockUpdatedCallback","forceUpdate","flat","createTileTypeLegendsView","ref","yRow","j","blockData","clickCallback","updateTileAtCoords","bind","height","current","clientWidth","length","Component","BlockView","DataStructures","country","subregion","regions","flatMap","subregions","consts","COUNTRIES","Error","names","prevVal","modifier","type","value","DataSerializer","input","playerData","SerializeToJSONAnDownload","a","json","JSON","stringify","blob","Blob","URL","createObjectURL","href","link","document","createElement","download","body","appendChild","click","removeChild","UpdateData","parse","stage","selectedCountry","countryName","selectedRegion","regionName","selectedTraits","regionTraitsSelected","selectedGridSize","tileMatrix","appState","propertyName","playerName","lastDateModified","versionCreatedWith","CreateEmptyTileMatrix","floor","SelectCountry","selectCountryCallback","SelectRegion","defaultSubregion","selectedSubregion","region","selectRegionCallback","SelectTraits","multipliers","dangerLevel","baseMultiplier","landCost","buildCost","tpValue","forEach","ResolveValueModifier","possibleTraits","trait","selectTraitCallback","SelectSize","window","addEventListener","arrX","Array","arrY","fill","possibleGridSizes","grid","gridSizeSelectCallback","width","App","newJson","getAppStateFromPlayerData","traitName","filter","push","ConvertToTileType","ConstructData","UploadedJson","countrySelectCallback","regionSelectCallback","GetSubregionByName","GetTraitsFromNames","traitSelectCallback","GRID_SIZES","gridSelectCallback","blockUpdateCallback","nextClickCallback","Header","calculateData","calculatedLandCost","calculatedGoldCost","calculatedTpCost","join","finalMultipliers","GetCountryDataByName","baseRegionValues","log","TILES","BASE_COSTS","LAND_COST","GetQualityFromBlock","FileInput","fileReader","jsonFile","FileReader","onload","event","target","result","onChange","file","readAsText","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.2a52244e.chunk.js","sourcesContent":["import React, { Component, createRef } from 'react'; // let's also import Component\r\nimport './edit-property.scss';\r\n\r\nimport { PlayerData, TileType } from './data-structures';\r\n\r\nconst TILE_INDOOR_CONSTS:TileConstType[] = [\r\n    {\r\n        tileType: \"empty\",\r\n        tileDisplayName: \"Empty\",\r\n        color: \"white\",\r\n        baseTpCost: 0,\r\n        baseGpCost: 0\r\n    },\r\n    {\r\n        tileType: \"cheap\",\r\n        tileDisplayName: \"Cheap\",\r\n        color: \"#4e342e\",\r\n        baseTpCost: 2,\r\n        baseGpCost: 10\r\n    },\r\n    {\r\n        tileType: \"generic\",\r\n        tileDisplayName: \"Generic\",\r\n        color: \"#c62828\",\r\n        baseTpCost: 8,\r\n        baseGpCost: 30\r\n    },\r\n    {\r\n        tileType: \"expensive\",\r\n        tileDisplayName: \"Expensive\",\r\n        color: \"#d84315\",\r\n        baseTpCost: 30,\r\n        baseGpCost: 100\r\n    },\r\n    {\r\n        tileType: \"very-expensive\",\r\n        tileDisplayName: \"Very Expensive\",\r\n        color: \"#f9a825\",\r\n        baseTpCost: 100,\r\n        baseGpCost: 300\r\n    }\r\n]\r\n\r\ntype TileConstType = {\r\n    tileType: string;\r\n    tileDisplayName: string;\r\n    color: string;\r\n    baseTpCost: number;\r\n    baseGpCost: number;\r\n}\r\n\r\nexport class Block {\r\n    tile:TileConstType;\r\n    traits:string[] = [];\r\n    constructor(data:{tile?:TileType, const?:TileConstType}){\r\n        if(data.tile){\r\n            let t = data.tile;\r\n            this.tile = TILE_INDOOR_CONSTS.find(x=>x.tileDisplayName === t.name) as TileConstType;\r\n            this.traits = t.traits;\r\n        } else if(data.const) {\r\n            this.tile = data.const;\r\n        }\r\n        else {\r\n            throw console.error(\"Need either 'tile' or 'const' defined\");\r\n        }\r\n    }\r\n    \r\n\r\n    ConvertToTileType():TileType{\r\n        return {\r\n            name: this.tile.tileDisplayName,\r\n            traits: this.traits\r\n        }\r\n    }\r\n}\r\n\r\ntype PropertyState = {\r\n    blockMatrix:Block[][][],\r\n    selectedTileType:TileConstType,\r\n    currentLevel: number,\r\n    currentlySelectedTraits: string[]\r\n}\r\n\r\nexport function ConvertTileMatrixToBlockMatrix(mapMatrix:TileType[][][]):Block[][][]{\r\n    return mapMatrix.map(x=>x.map(y=>y.map(z=>new Block({tile:z}))));\r\n}\r\n\r\nexport function ConvertBlockMatrixToTileMatrix(mapMatrix:Block[][][]):TileType[][][]{\r\n    return mapMatrix.map(x=>x.map(y=>y.map(z=>z.ConvertToTileType())));\r\n}\r\n\r\nexport class EditProperty extends Component<{data:PlayerData, blockUpdatedCallback:Function}, PropertyState> {\r\n    constructor(props: any) {\r\n      super(props)\r\n      this.state = {\r\n          blockMatrix : ConvertTileMatrixToBlockMatrix(props.data.mapMatrix),\r\n          selectedTileType: TILE_INDOOR_CONSTS[0],\r\n          currentLevel: 0,\r\n          currentlySelectedTraits: []\r\n      }\r\n    }\r\n\r\n    private table = createRef<HTMLTableElement>();\r\n\r\n    \r\n\r\n    TileSelected(tile:TileConstType){\r\n        this.setState({\r\n            selectedTileType:tile\r\n        })\r\n    }\r\n\r\n\r\n    createTileTypeLegendsView(tile:TileConstType, i:number) {\r\n        return(\r\n            <li onClick={()=>this.TileSelected(tile)} key={i} className={`tile-${tile.tileType} ${(tile.tileType === this.state.selectedTileType.tileType ? 'active' : '')}`}>\r\n                {tile.tileDisplayName} <span className=\"color-block\" style={{backgroundColor:tile.color}}></span>\r\n            </li>\r\n        )\r\n    }\r\n\r\n    updateTileAtCoords(coords:{x:number, y:number}){\r\n        const block:Block = new Block({const:this.state.selectedTileType});\r\n        this.state.blockMatrix[coords.x][coords.y][this.state.currentLevel] = block;\r\n        this.props.blockUpdatedCallback(this.state.blockMatrix);\r\n        this.forceUpdate();\r\n    }\r\n\r\n    render(){\r\n        let flattenedBlocks: Block[] = this.state.blockMatrix.flat().flat();\r\n        //let calculatedTpCost: number = flattenedBlocks.map(block=>block.tile.baseTpCost).reduce((accumulator, currentValue) => accumulator + currentValue);\r\n        //let calculatedGoldCost: number = flattenedBlocks.map(block=>block.tile.baseGpCost).reduce((accumulator, currentValue) => accumulator + currentValue);\r\n\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-2\">\r\n                    <h2>Blocks:</h2>\r\n                    <h3>Indoor:</h3>\r\n                        <ul>\r\n                        {\r\n                            TILE_INDOOR_CONSTS.map((tile, i) => this.createTileTypeLegendsView(tile, i))\r\n                        }\r\n                        </ul>\r\n                    <br/>\r\n\r\n                    <h3>Outdoor:</h3>\r\n                    <div>Field <span className=\"tile tile-field\"></span></div>\r\n                    <div>Decorated <span className=\"tile tile-decorated\"></span></div>\r\n                    <div>Well Decorated <span className=\"tile tile-well-decorated\"></span></div>\r\n                    <div>Very Decorated <span className=\"tile tile-very-decorated\"></span></div>\r\n\r\n                    <h3>Special:</h3>\r\n                    <div>Reinforced Wooden Wall <span className=\"tile tile-wooden-wall\"></span></div>\r\n                    <div>Reinforced Stone Wall <span className=\"tile tile-stone-wall\"></span></div>\r\n                    <div>Escape Tunnel <span className=\"tile tile-escape-tunnel\"></span></div>\r\n                </div>\r\n                <div className=\"col-7\">\r\n                    <table ref={this.table} className=\"block-matrix-table\">\r\n                        <tbody>\r\n                        {\r\n                            this.state.blockMatrix.map((yRow, i) =>(\r\n                                <tr key={i}>\r\n                                {\r\n                                    yRow.map((block, j) => (\r\n                                        <BlockView key={j} blockData={block[this.state.currentLevel]} coords={{x:i,y:j}}\r\n                                         clickCallback={this.updateTileAtCoords.bind(this)}\r\n                                         height={(this.table.current?.clientWidth || 0)/this.state.blockMatrix.length}\r\n                                         />\r\n                                    ))\r\n                                }\r\n                                </tr>\r\n                            ))\r\n                        }\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <div className=\"col-3\">\r\n                     \r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n  }\r\n\r\n  class BlockView extends Component<{blockData:Block, clickCallback:Function, coords:{x:number, y:number}, height:number}> {\r\n    constructor(props: any) {\r\n      super(props)\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <td onClick={()=>this.props.clickCallback(this.props.coords)}\r\n                style={{backgroundColor:this.props.blockData.tile.color, height:this.props.height}}\r\n            >\r\n                </td>\r\n        )\r\n    }\r\n\r\n}","import consts from \"./consts.json\";\r\nimport traits from \"./traits.json\";\r\nimport { AppState } from \"./App\";\r\nimport { Block, ConvertBlockMatrixToTileMatrix } from './edit-property';\r\n\r\nexport class DataStructures {\r\n\r\n    static GetSubregionByName(country:CountryType, name:string):SubregionType{\r\n        const subregions:SubregionType[] = country.regions.flatMap(x=>x.subregions);\r\n        const subregion = subregions.find(x=>x.name === name);\r\n        if(subregion) return subregion as SubregionType;\r\n        throw console.error(`No subregion with name ${name} for Country ${country.name}`);\r\n    }\r\n\r\n    static GetCountryDataByName(name:string):CountryType{\r\n        const country = consts.COUNTRIES.find(country=> country.name === name);\r\n        if(country) return country as CountryType;\r\n        throw new Error(`No country with name ${name}`);\r\n    }\r\n\r\n    static GetTraitsFromNames(names:string[]):Trait[]{\r\n        return names.map(x=>traits.find(y=>y.name===x) as Trait);\r\n    }\r\n\r\n    static GetQualityFromBlock(block:Block):Trait{\r\n        return {\r\n            \"name\": \"Beautiful\",\r\n            \"description\": \"The land either has an amazing view or is in an area valued for its fantastic majestic beauty. The land itself costs double but building blocks grant 50% addition TP. /n /n Can't be select with the Slumtown trait.\",\r\n            \"dangerLevel\": { \"type\": \"ADD\", \"value\": 0 },\r\n            \"landCost\": { \"type\": \"MULT\", \"value\": 2 },\r\n            \"buildCost\": { \"type\": \"MULT\", \"value\": 1 },\r\n            \"tpValue\": { \"type\": \"MULT\", \"value\": 1.5 },\r\n            \"exclusiveWith\": [\"Slumtown\"]\r\n        };\r\n    }\r\n\r\n    static ResolveValueModifier(prevVal:number, modifier:ValueModifierType):number{\r\n        switch(modifier.type){\r\n            case \"ADD\":\r\n                return prevVal+modifier.value;\r\n            case \"MULT\":\r\n                return prevVal*modifier.value;\r\n        }\r\n    }\r\n}\r\n\r\nexport type TileType = {\r\n    name: string,\r\n    traits: string[]\r\n}\r\n\r\nexport type PlayerData = {\r\n    propertyName: string,\r\n    playerName: string,\r\n    lastDateModified: string,\r\n    versionCreatedWith: string,\r\n    countryName: string,\r\n    regionName: string,\r\n    regionTraitsSelected: string[],\r\n    mapMatrix: TileType[][][]\r\n}\r\n\r\nexport class DataSerializer {\r\n    playerData!: PlayerData;\r\n\r\n    constructor(input?:string){\r\n        if(input) this.UpdateData(input);\r\n    }\r\n\r\n    SerializeData(){\r\n        return JSON.stringify(this.playerData);\r\n    }\r\n\r\n    UpdateData(input:string){\r\n        this.playerData = JSON.parse(input);\r\n    }\r\n\r\n    getAppStateFromPlayerData():AppState{\r\n        return {\r\n            stage: \"edit\",\r\n            selectedCountry: this.playerData.countryName,\r\n            selectedRegion: this.playerData.regionName,\r\n            selectedTraits: this.playerData.regionTraitsSelected,\r\n            selectedGridSize: {x:this.playerData.mapMatrix.length, y:this.playerData.mapMatrix[0].length},\r\n            tileMatrix: this.playerData.mapMatrix\r\n        }\r\n    }\r\n\r\n    ConstructData(appState:AppState){\r\n        let data:PlayerData = {\r\n          propertyName: \"Test Property\",\r\n          playerName: \"Test Player\",\r\n          lastDateModified: \"Ignored\",\r\n          versionCreatedWith: \"Ignored\",\r\n          countryName: appState.selectedCountry || \"\",\r\n          regionName: appState.selectedRegion || \"\",\r\n          regionTraitsSelected: appState.selectedTraits,\r\n          mapMatrix: []\r\n        };\r\n        if(appState.tileMatrix.length > 0){\r\n            data.mapMatrix = appState.tileMatrix;\r\n        }\r\n        else {\r\n            data.mapMatrix = this.CreateEmptyTileMatrix(appState.selectedGridSize.x, appState.selectedGridSize.y);\r\n        }\r\n        this.playerData = data;\r\n        return data;\r\n    }\r\n\r\n    SerializeToJSONAnDownload = async () =>{ \r\n        \r\n        const json = JSON.stringify(this.playerData);\r\n        const blob = new Blob([json],{type:'application/json'});\r\n        const href = await URL.createObjectURL(blob);\r\n        const link = document.createElement('a');\r\n\r\n        link.href = href;\r\n        link.download = \"muh_propery.json\";\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        document.body.removeChild(link);\r\n        \r\n    }\r\n\r\n    CreateEmptyTileMatrix(x:number, y:number){\r\n        let floor:TileType[][][] = [];\r\n        for(let i=0; i < x; i++){\r\n            floor[i]=[];\r\n            for(let j=0; j < y; j++){\r\n                floor[i][j]=[];\r\n                floor[i][j][0] = {\r\n                name: \"Empty\",\r\n                traits: []\r\n                }\r\n            }\r\n        }\r\n        return floor;\r\n      }\r\n}\r\n\r\nexport type ValueModifierType = {\r\n    type: (\"ADD\" | \"MULT\"),\r\n    value: number\r\n}\r\n\r\nexport type RegionType = {\r\n    name:string,\r\n    subregions: SubregionType[]\r\n}\r\n\r\nexport type SubregionType = {\r\n    name:string,\r\n    dangerLevel:number,\r\n    landCost:number,\r\n    buildCost:number,\r\n    tpValue:number,\r\n    traits:string[];\r\n}\r\n\r\nexport type Trait = {\r\n    name:string,\r\n    description:string,\r\n    dangerLevel: ValueModifierType,\r\n    landCost: ValueModifierType,\r\n    buildCost: ValueModifierType,\r\n    tpValue: ValueModifierType,\r\n    exclusiveWith: string[]\r\n}\r\n\r\nexport type CountryType = {\r\n    name:string;\r\n    imageName: string;\r\n    regions:RegionType[];\r\n}\r\n\r\nexport const COUNTRY_DEFAULT:CountryType = {\r\n    name:\"\",\r\n    imageName:\"\",\r\n    regions:[]\r\n};\r\n\r\nfunction is<T>(o: any, sample:T, strict = true, recursive = true) : o is T {\r\n    if( o == null) return false;\r\n    let s = sample as any;\r\n    // If we have primitives we check that they are of the same type and that type is not object \r\n    if(typeof s === typeof o && typeof o != \"object\") return true;\r\n\r\n    //If we have an array, then each of the items in the o array must be of the same type as the item in the sample array\r\n    if(o instanceof Array){\r\n        // If the sample was not an arry then we return false;\r\n        if(!(s instanceof Array)) return false;\r\n        let oneSample = s[0];\r\n        let e: any;\r\n        for(e of o) {\r\n            if(!is(e, oneSample, strict, recursive)) return false;\r\n        }\r\n    } else {\r\n        // We check if all the properties of sample are present on o\r\n        for(let key of Object.getOwnPropertyNames(sample)) {\r\n            if(typeof o[key] !== typeof s[key]) return false;\r\n            if(recursive && typeof s[key] == \"object\" && !is(o[key], s[key], strict, recursive)) return false;\r\n        }\r\n        // We check that o does not have any extra prperties to sample\r\n        if(strict)  {\r\n            for(let key of Object.getOwnPropertyNames(o)) {\r\n                if(s[key] == null) return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    return true;\r\n}","import { Component, Ref, createRef } from \"react\";\r\nimport React from \"react\";\r\nimport consts from \"./consts.json\";\r\nimport { DataStructures, Trait, SubregionType } from './data-structures';\r\n\r\nexport class SelectCountry extends Component<{selectedCountry:string, selectCountryCallback:Function}>{\r\n    render(){\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-2\">\r\n                    <h2>Select Country:</h2>\r\n                    <ul>\r\n                        {\r\n                            consts.COUNTRIES.map((x, i)=>(\r\n                                <li key={i} className={this.props.selectedCountry === x.name ? \"active\" : \"\"} onClick={()=>this.props.selectCountryCallback(x.name)}>{x.name}</li>\r\n                            ))\r\n                        }\r\n                    </ul>\r\n                </div>\r\n                <div className=\"col\">\r\n                    Pretty pictures and shit go here\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport class SelectRegion extends Component<{selectedCountry:string, selectRegionCallback:Function, selectedSubregion:string}>{\r\n    render(){\r\n        const country = consts.COUNTRIES.find(country => country.name === this.props.selectedCountry);\r\n        const regions = country?.regions || [];\r\n\r\n        let defaultSubregion = {\r\n            \"name\": \"\",\r\n            \"dangerLevel\": 0,\r\n            \"landCost\": 0,\r\n            \"buildCost\": 0,\r\n            \"tpValue\": 0\r\n        };\r\n        if(this.props.selectedSubregion !== \"\"){\r\n            defaultSubregion = regions.flatMap(x=> x.subregions).find(y=>y.name === this.props.selectedSubregion) || defaultSubregion;\r\n        }\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-2\">\r\n                    <h2>Select Region:</h2>\r\n                    {\r\n                        regions.map((region, i)=>(\r\n                            <div key={i} className=\"row\">\r\n                                <div className=\"col\"> {region.name} </div>\r\n                                <div className=\"col\">\r\n                                    <ul>\r\n                                        {region.subregions.map((subregion, j) => <li key={j} className={this.props.selectedSubregion === subregion.name ? \"active\" : \"\"} onClick={()=>this.props.selectRegionCallback(subregion.name)}>{subregion.name}</li>)}\r\n                                    </ul>\r\n                                </div>\r\n\r\n                            </div>\r\n                        ))\r\n                    }\r\n                </div>\r\n                <div className=\"col\">\r\n                    Pretty pictures and shit go here\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport class SelectTraits extends Component<{possibleTraits:Trait[], selectedTraits:Trait[], baseMultiplier:SubregionType, countryName:string, selectTraitCallback:Function}>{\r\n    render(){\r\n        let multipliers = {\r\n            dangerLevel: this.props.baseMultiplier.dangerLevel,\r\n            landCost: this.props.baseMultiplier.landCost,\r\n            buildCost: this.props.baseMultiplier.buildCost,\r\n            tpValue: this.props.baseMultiplier.tpValue\r\n        };\r\n        this.props.selectedTraits.forEach(x =>\r\n        {\r\n            multipliers.dangerLevel = DataStructures.ResolveValueModifier(multipliers.dangerLevel, x.dangerLevel);\r\n            multipliers.landCost = DataStructures.ResolveValueModifier(multipliers.landCost, x.landCost);\r\n            multipliers.buildCost = DataStructures.ResolveValueModifier(multipliers.buildCost, x.buildCost);\r\n            multipliers.tpValue = DataStructures.ResolveValueModifier(multipliers.tpValue, x.tpValue);\r\n        });\r\n\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-5\">\r\n                    <h2>{this.props.countryName} Traits:</h2>\r\n                    <ul>\r\n                    {\r\n                        //To-do, list render all the possible traits\r\n                        this.props.possibleTraits.map((trait, i) => <li key={i} className={this.props.selectedTraits.find(x=>x.name===trait.name) ? \"active\" : \"\"} onClick={(x=>this.props.selectTraitCallback(trait.name))}>{trait.name}</li>)\r\n                    }\r\n                    </ul>\r\n                </div>\r\n                <div className=\"col\">\r\n                    Base Info\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport class SelectSize extends Component<{possibleGridSizes:{x:number, y:number}[], selectedGridSize:{x:number, y:number}, gridSizeSelectCallback:Function}>{\r\n    private table = createRef<HTMLTableElement>();\r\n    constructor(props:any){\r\n        super(props);\r\n        window.addEventListener('resize', ()=>this.forceUpdate())\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.forceUpdate();\r\n    }\r\n\r\n    render(){\r\n        let arrX = new Array<number>(this.props.selectedGridSize.x);\r\n        let arrY = new Array<number>(this.props.selectedGridSize.y);\r\n        arrX.fill(0);\r\n        arrY.fill(0);\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-3\">\r\n                    <ul>\r\n                        {\r\n                            this.props.possibleGridSizes.map((grid, i)=>{\r\n                                return <li key={i} className={this.props.selectedGridSize === grid ? \"active\" : \"\"} onClick={()=>this.props.gridSizeSelectCallback(grid)} >{grid.x} x {grid.y}</li>\r\n                            })\r\n                        }\r\n                    </ul>\r\n                </div>\r\n                <div className=\"col\">\r\n                <table ref={this.table} className=\"block-matrix-table\">\r\n                        <tbody>\r\n                        {\r\n                            arrY.map((yRow, i) =>(\r\n                                <tr key={i}>\r\n                                {\r\n                                    arrX.map((block, j) => (\r\n                                        <td key={j} style={{width:(this.table.current?.clientWidth ||  0)/arrX.length, height:(this.table.current?.clientWidth || 0)/arrX.length}}/>\r\n                                    ))\r\n                                }\r\n                                </tr>\r\n                            ))\r\n                        }\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <div className=\"col-3\"></div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component, RefObject } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Block, EditProperty, ConvertTileMatrixToBlockMatrix, ConvertBlockMatrixToTileMatrix } from './edit-property';\nimport { SelectCountry, SelectRegion, SelectTraits, SelectSize } from './select-country';\nimport consts from \"./consts.json\";\nimport { Trait, CountryType, COUNTRY_DEFAULT, SubregionType, DataStructures, PlayerData, TileType, DataSerializer } from './data-structures';\nimport Files from 'react-files';\n\nfunction generateDefaultBlock():Block{\n  return new Block({tile:{\n    name: \"Empty\",\n    traits:[]\n  }\n  });\n}\n\nexport type AppState = {\n  stage:string,\n  selectedCountry:string,\n  selectedRegion:string,\n  selectedTraits:string[]\n  selectedGridSize:{x:number, y:number},\n  tileMatrix:TileType[][][]\n}\n\n\nclass App extends Component<{}, AppState> {\n  data:DataSerializer;\n\n  constructor(props:any){\n    super(props);\n    this.state = {\n      stage: \"landing\",\n      selectedCountry: \"\",\n      selectedRegion: \"\",\n      selectedTraits:[],\n      selectedGridSize: {x:0, y:0},\n      tileMatrix:[]\n    }\n    this.data = new DataSerializer();\n  }\n\n\n  UploadedJson(newJson:string){\n    this.data.UpdateData(newJson);\n    this.setState(this.data.getAppStateFromPlayerData());\n  }\n\n  countrySelectCallback(countryName:string){\n    this.setState({selectedCountry:countryName});\n  }\n\n  regionSelectCallback(regionName:string){\n    this.setState({selectedRegion:regionName});\n  }\n\n  traitSelectCallback(traitName:string){\n    if(this.state.selectedTraits.find(x=>x === traitName)) this.setState({selectedTraits: this.state.selectedTraits.filter(x=>x!==traitName)});\n    else this.state.selectedTraits.push(traitName);\n    this.forceUpdate();\n  }\n\n  gridSelectCallback(grid:{x:number, y:number}){\n    this.setState({selectedGridSize:grid});\n  }\n\n  blockUpdateCallback(blockMatrix:Block[][][]){\n    this.setState({tileMatrix:ConvertBlockMatrixToTileMatrix(blockMatrix)});\n  }\n\n  nextClickCallback(){\n\n    switch(this.state.stage){\n      case 'country-select':\n        if(this.state.selectedCountry !== \"\") this.setState({stage:\"region-select\"});\n        else console.error(`No country selected`);\n        break;\n      case 'region-select':\n        if(this.state.selectedRegion !== \"\") this.setState({stage:\"trait-select\"});\n        break;\n      case 'trait-select':\n        this.setState({stage:'size-select'})\n        break;\n      case 'size-select':\n          this.setState({stage:'edit'})\n          break;\n      default: \n        console.error(`Unsupported Stage State ${this.state.stage}`);\n    }\n  }\n\n  render(){\n    this.data.ConstructData(this.state);\n    return (\n      <div className=\"App\">\n        {\n          this.state.stage !== \"landing\" ? <Header data={this.data.playerData}/> : null\n        }\n        {(() => {\n        switch (this.state.stage) {\n          case 'landing':\n            return (\n              <div className=\"row\">\n                <div className=\"col\"><button onClick={()=>{this.setState({stage:\"country-select\"})}}>New Property</button></div>\n                <div className=\"col\"><FileInput UploadedJson={(newJson:any)=>this.UploadedJson(newJson)}></FileInput></div>\n              </div>\n            );\n          case 'country-select':\n            return (\n            <div>\n              <SelectCountry selectedCountry={this.state.selectedCountry} selectCountryCallback={(x:string)=>this.countrySelectCallback(x)}/>\n            </div>\n            );\n          case 'region-select':\n              return (\n              <div>\n                <SelectRegion selectedSubregion={this.state.selectedRegion} selectedCountry={this.state.selectedCountry} selectRegionCallback={(x:string)=>this.regionSelectCallback(x)} ></SelectRegion>\n              </div>\n              );\n          case 'trait-select':\n            let country:CountryType = consts.COUNTRIES.find(country => country.name === this.state.selectedCountry) as CountryType;\n            let selectedRegion:SubregionType = DataStructures.GetSubregionByName(country, this.state.selectedRegion);\n            let possibleTraits:Trait[] = DataStructures.GetTraitsFromNames(selectedRegion.traits);\n            let selectedTraits:Trait[] = this.state.selectedTraits.map((x)=> possibleTraits.find(y=>y.name === x) as Trait);\n            return (\n              <SelectTraits selectedTraits={selectedTraits} possibleTraits={possibleTraits} countryName={country.name} selectTraitCallback={(x:string)=>this.traitSelectCallback(x)} baseMultiplier={selectedRegion} />\n            );\n          case 'size-select':{\n            return(\n              <SelectSize possibleGridSizes={consts.GRID_SIZES} selectedGridSize={this.state.selectedGridSize} gridSizeSelectCallback={(grid:{x:number, y:number})=>this.gridSelectCallback(grid)} />\n            )\n          }\n          case 'edit':\n            return <EditProperty data={this.data.playerData} blockUpdatedCallback={this.blockUpdateCallback.bind(this)}/>;\n          default:\n            return null;\n        }\n      })()}\n      <hr/>\n      <div className=\"row\">\n        <div className=\"col\"><button>Back</button></div>\n        <div className=\"col\">\n          {\n            this.state.stage === \"edit\" ? <button onClick={()=>this.data.SerializeToJSONAnDownload()}>Download JSON</button> : <button onClick={()=>this.nextClickCallback()}>Next</button>\n          }\n        </div>\n      </div>\n      </div>\n    );\n  }\n\n}\n\ntype HeaderState = {\n  calculatedLandCost:number,\n  calculatedGoldCost:number,\n  calculatedTpCost:number\n  multipliers:{\n    dangerLevel:number,\n    landCost:number,\n    buildCost:number,\n    tpValue:number\n  }\n}\n\nclass Header extends Component<{data:PlayerData}, HeaderState> {\n  constructor(props:any){\n    super(props);\n    this.state = Header.calculateData({data:this.props.data});\n  }\n\n\n  static getDerivedStateFromProps(props:any, state:any){\n    return Header.calculateData(props);\n  }\n\n  static calculateData(props:{data:PlayerData}){\n\n    let finalMultipliers = {\n      dangerLevel: 0,\n      buildCost: 0,\n      landCost: 0,\n      tpValue: 0\n    };\n\n    if(props.data.countryName !== \"\" && props.data.regionName !== \"\"){\n      let country = DataStructures.GetCountryDataByName(props.data.countryName);\n      let baseRegionValues = DataStructures.GetSubregionByName(country, props.data.regionName);\n      finalMultipliers = {...baseRegionValues};\n    }\n    \n    DataStructures.GetTraitsFromNames(props.data.regionTraitsSelected).map((trait)=>{\n      finalMultipliers.dangerLevel = DataStructures.ResolveValueModifier(finalMultipliers.dangerLevel, trait.dangerLevel);\n      finalMultipliers.buildCost = DataStructures.ResolveValueModifier(finalMultipliers.buildCost, trait.buildCost);\n      finalMultipliers.landCost = DataStructures.ResolveValueModifier(finalMultipliers.landCost, trait.landCost);\n      finalMultipliers.tpValue = DataStructures.ResolveValueModifier(finalMultipliers.tpValue, trait.tpValue);\n    });\n\n    let landCost:number = 0;\n    console.log(props.data.mapMatrix);\n    if(props.data.mapMatrix.length > 0) landCost = props.data.mapMatrix.flat().length*consts.TILES.BASE_COSTS.LAND_COST*finalMultipliers.landCost;\n\n    let buildCost:number = 0;\n    let tpValue:number = 0;\n\n    if(props.data.mapMatrix.length > 0) {\n      let blockMatrix = ConvertTileMatrixToBlockMatrix(props.data.mapMatrix)\n      blockMatrix.flat().flat().map((block)=>{\n        let multipliers = DataStructures.GetQualityFromBlock(block);\n        buildCost += DataStructures.ResolveValueModifier(block.tile.baseGpCost, multipliers.buildCost);\n        tpValue += DataStructures.ResolveValueModifier(block.tile.baseTpCost, multipliers.tpValue);\n      })\n    }\n    return {\n      calculatedLandCost:landCost,\n      calculatedGoldCost:buildCost,\n      calculatedTpCost:tpValue,\n      multipliers:finalMultipliers\n    };\n  }\n\n  render(){\n    return(\n      <div className=\"row\">\n        <div className=\"col-2\">\n              <div>\n                  <b>Total:</b> Land Cost - {this.state.calculatedLandCost} gp <br/>\n                  Build Cost - {this.state.calculatedGoldCost} gp <br/>\n                  TP Value -  {this.state.calculatedTpCost} tp <br/>\n              </div>\n        </div>\n        <div className=\"col\">\n          <h3>\n            {this.props.data.countryName || \"\"} - {this.props.data.regionName || \"\"}\n          </h3>\n          <h4>\n            {this.props.data.regionTraitsSelected.join(\", \")}\n          </h4>\n        </div>\n        <div className=\"col-2\">\n              <div>\n                  <b>Total:</b> Danger Level - {this.state.multipliers.dangerLevel} <br/>\n                  Land Cost - {this.state.multipliers.landCost*100}% <br/>\n                  Build Cost -  {this.state.multipliers.buildCost*100}% <br/>\n                  TP Value -  {this.state.multipliers.tpValue*100}% <br/>\n              </div>\n        </div>\n      </div>\n    )\n  }\n}\n\n\nclass FileInput extends Component<{UploadedJson:Function}> {\n\n  fileReader:FileReader;\n  constructor(props:any) {\n    super(props);\n    this.state = {\n      jsonFile: {}\n  };\n  \n  this.fileReader = new FileReader();\n\n  this.fileReader.onload = (event) => {\n    const target = event.target;\n    // or do whatever manipulation you want on JSON.parse(event.target.result) here.\n    if(target){\n      this.props.UploadedJson(target.result as string);\n    }\n    else{\n      console.error(\"wat\")\n    }\n  };\n  }\n\n  render() {\n\n    return (\n       <div className=\"files\">\n         <Files\n          onChange={(file: Blob[]) => {\n              // we choose readAsText() to load our file, and onload\n              // event we rigister in this.fileReader would be triggered.\n              this.fileReader.readAsText(file[0]);\n          }}\n         >\n           Drop files here or click to upload\n         </Files>\n       </div>\n    );\n  }\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}